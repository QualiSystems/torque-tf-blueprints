{{- /* Allow passing a JSON object via env VM_DATA or .Values.vmName to override any value keys */ -}}
{{- $rawVm := coalesce (toString .Values.vmName | default "" | trim) -}}
{{- $over := dict -}}
{{- if and $rawVm (hasPrefix "{" $rawVm) -}}
  {{- $over = fromJson $rawVm -}}
{{- end -}}
{{- $vals := merge (dict) .Values $over -}}
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: {{ $vals.vmName }}
  namespace: {{ $vals.namespace }}
spec:
  # Determine run strategy based on autoStart (supports bool or string)
  {{- $autoStart := (toString $vals.autoStart | lower) -}}
  {{- if eq $autoStart "true" }}
  runStrategy: RerunOnFailure
  {{- else }}
  runStrategy: Halted
  {{- end }}
  dataVolumeTemplates:
    - apiVersion: cdi.kubevirt.io/v1beta1
      kind: DataVolume
      metadata:
        name: {{ $vals.vmName }}
      spec:
        {{- /* If volumeSnapshot is provided, use snapshot source; otherwise, use DataSource */}}
        {{- $snapshot := (trim $vals.volumeSnapshot | default "") -}}
        {{- if $snapshot }}
        source:
          snapshot:
            name: {{ $snapshot }}
            {{- if $vals.volumeSnapshotNamespace }}
            namespace: {{ $vals.volumeSnapshotNamespace }}
            {{- end }}
        {{- else }}
        sourceRef:
          kind: DataSource
          name: {{ $vals.imageDs }}
          namespace: {{ $vals.imageNs }}
        {{- end }}
        storage:
          resources:
            requests:
              storage: {{ $vals.storageSize }}
          {{- /* Allow override of storageClassName, default to previous value for backward compatibility */}}
          {{- if $vals.storageClassName }}
          storageClassName: {{ $vals.storageClassName }}
          {{- else }}
          storageClassName: lvm-smartclone
          {{- end }}
  template:
    metadata:
      labels:
        kubevirt.io/domain: {{ $vals.vmName }}
        kubevirt.io/size: small
      annotations:
        vm.kubevirt.io/flavor: small
        vm.kubevirt.io/os: fedora-42
        vm.kubevirt.io/workload: server
    spec:
      architecture: amd64
      domain:
        firmware:
          uuid: {{ $vals.uuid }}
        cpu:
          cores: {{ $vals.cpu }}
          sockets: 1
          threads: 1
        devices:
          disks:
            - name: rootdisk
              disk:
                bus: virtio
            - name: cloudinitdisk
              disk:
                bus: virtio
          interfaces:
            {{- if $vals.networks }}
            {{- /* Split by either comma or semicolon */}}
            {{- $networkList := regexSplit "[,;]" $vals.networks -1 }}
            {{- range $index, $networkEntry := $networkList }}
            {{- $networkEntry := $networkEntry | trim }}
            - name: net-{{ $index }}
              bridge: {}
              {{- if gt (len $networkList) 1 }}
              acpiIndex: {{ add $index 1 }}
              {{- end }}
            {{- end }}
            {{- end }}
          rng: {}
        machine:
          type: pc-q35-rhel9.6.0
        memory:
          guest: {{ $vals.ram }}
      networks:
        {{- if $vals.networks }}
        {{- /* Split by either comma or semicolon */}}
        {{- $networkList := regexSplit "[,;]" $vals.networks -1 }}
        {{- range $index, $networkEntry := $networkList }}
        {{- $networkEntry := $networkEntry | trim }}
        {{- if ne $networkEntry "" }}
        {{- /* Parse network entry safely */}}
        {{- $namespace := $.Release.Namespace }}
        {{- $networkName := $networkEntry }}
        - name: net-{{ $index }}
          {{- if contains "/" $networkEntry }}
          multus:              
            networkName: {{ $networkEntry }}
          {{- else}}
          pod: {}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
      terminationGracePeriodSeconds: 180
      volumes:
        - name: rootdisk
          dataVolume:
            name: {{ $vals.vmName }}
        - name: cloudinitdisk
          cloudInitNoCloud:
            userData: |
              #cloud-config
              user: {{ $vals.userName }}
              password: {{ $vals.userPassword }}
              chpasswd: { expire: False }
