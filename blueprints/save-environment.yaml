spec_version: 2
description: Workflow to set a VM's power-state

workflow: 
  scope: env

inputs:
  torque_token:
    type: string
    description: "Token for Torque API."
    default: ""
  github_token:
    type: string
    description: "Token for GitHub API."
    default: ""
  github_repo:
    type: string
    description: "Name of the GitHub repository."
    default: "https://github.com/QualiSystems/torque-tf-blueprints"
  target_namespace:
    type: string
    description: "Target namespace for the workflow."
    default: "quali"
  snapshot_storage_class:
    type: string
    description: "Storage class for the volume snapshots."
    default: "lvms-vg2"

grains:
  power-off-vms:
    kind: shell
    spec:
      env-vars:
        - TORQUE_API_TOKEN: "{{ .inputs.torque_token }}"
      agent:
        name: openshift-agent
      files:
        - source: torque-tf-blueprints
          path: scripts/bulk_workflow_run/bulk_workflow_run.py
        - source: torque-tf-blueprints
          path: scripts/bulk_workflow_run/requirements.txt
        - source: torque-tf-blueprints
          path: scripts/pyTorque-api-wheel/pytorque-0.1.1.2-py3-none-any.whl
      activities:
        deploy:
          commands:
            - 'pip install pytorque-0.1.1.2-py3-none-any.whl'
            - 'pip install -r requirements.txt'
            - "python bulk_workflow_run.py --space={{ spaceName }} --workflow=openshift-vm-power-off"

  collect_vm_names:
    kind: shell
    spec:
      agent:
        name: openshift-agent
      files:
        - source: torque-tf-blueprints
          path: scripts/get_vm_names/get_vm_names.py
      activities:
        deploy:
          commands:
            - name: get-vm-names
              command: 'export vmNames="$(python get_vm_names.py)" && echo "VM Names: $vmNames"'
              outputs:
                - vmNames
  
  save-volume-snapshot:
    kind: helm
    depends-on: collect_vm_names, power-off-vms
    spec:
      agent:
        name: openshift-agent
        isolated: true
      source:
        store: torque-tf-blueprints
        path: helm/k8s-clone-pvc-and-snapshot
      target-namespace: '{{ .inputs.target_namespace }}'
      command-arguments: '--wait --timeout 600s --debug'
      inputs:
        - vmNames: '{{ .grains.collect_vm_names.activities.deploy.commands.get-vm-names.outputs.vmNames }}'
        - namespace: '{{ .inputs.target_namespace }}'
        - volumeSnapshotClassName: '{{ .inputs.snapshot_storage_class }}'
      scripts:
        post-helm-install:
          source:
            store: torque-tf-blueprints
            path:  scripts/check_saved_pvc_snapshots.sh
          arguments: '{{ .grains.collect_vm_names.activities.deploy.commands.get-vm-names.outputs.vmNames }}'
          outputs:
            - snapshots_json
  
  save-env-script:
    kind: shell
    depends-on: save-volume-snapshot
    spec:
      env-vars:
        - GITHUB_TOKEN: "{{ .inputs.github_token }}"
        - TORQUE_API_TOKEN: "{{ .inputs.torque_token }}"
        - GITHUB_REPO: "{{ .inputs.github_repo }}"
      agent:
        name: openshift-agent
      files:
        - source: torque-tf-blueprints
          path: scripts/save_environment/save_environment.py
        - source: torque-tf-blueprints
          path: scripts/save_environment/requirements.txt
        - source: torque-tf-blueprints
          path: scripts/pyTorque-api-wheel/pytorque-0.1.1.2-py3-none-any.whl
      activities:
        deploy:
          commands:
            - 'pip install pytorque-0.1.1.2-py3-none-any.whl'
            - 'pip install -r requirements.txt'
            - "python save_environment.py --space={{ spaceName }} --new_inputs='{{ .grains.save-volume-snapshot.scripts.post-helm-install.outputs.snapshots_json }}' --workflow-contract=$CONTRACT_FILE_PATH"

  power-on-vms:
    kind: shell
    depends-on: save-env-script
    spec:
      env-vars:
        - TORQUE_API_TOKEN: "{{ .inputs.torque_token }}"
      agent:
        name: openshift-agent
      files:
        - source: torque-tf-blueprints
          path: scripts/bulk_workflow_run/bulk_workflow_run.py
        - source: torque-tf-blueprints
          path: scripts/bulk_workflow_run/requirements.txt
        - source: torque-tf-blueprints
          path: scripts/pyTorque-api-wheel/pytorque-0.1.1.2-py3-none-any.whl
      activities:
        deploy:
          commands:
            - 'pip install pytorque-0.1.1.2-py3-none-any.whl'
            - 'pip install -r ./scripts/bulk_workflow_run/requirements.txt'
            - "python ./scripts/bulk_workflow_run/bulk_workflow_run.py --space={{ spaceName }} --workflow=openshift-vm-power-on"