---
# Task file to power off a single VM identified by 'target' dict { vm_name, namespace }
- name: Check if VM exists
  k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    namespace: "{{ target.namespace }}"
    name: "{{ target.vm_name }}"
  register: vm_status
  failed_when: vm_status.resources | length == 0

- name: Get current VM running state
  set_fact:
    vm_running: "{{ (vm_status.resources[0].status.printableStatus | default('')) == 'Running' }}"

- name: Show current VM state
  debug:
    msg: "VM '{{ target.vm_name }}' in namespace '{{ target.namespace }}' is currently {{ 'running' if vm_running else 'stopped' }}."

- name: Power off VM if currently running
  when: vm_running
  block:
    - name: Update VM definition to set running state to false
      k8s:
        state: patched
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        namespace: "{{ target.namespace }}"
        name: "{{ target.vm_name }}"
        definition:
          spec:
            runStrategy: "Halted"
      register: vm_stop_result

    - name: Show VM stop action result
      debug:
        msg: "Started powering off VM '{{ target.vm_name }}' with {{ 'FORCE' if force_shutdown | bool else 'graceful' }} shutdown"

    - name: Force delete the VMI (Virtual Machine Instance) to accelerate shutdown
      k8s:
        state: absent
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        namespace: "{{ target.namespace }}"
        name: "{{ target.vm_name }}"
        wait: yes
        wait_timeout: 30
      when: force_shutdown | bool
      register: force_delete_result
      ignore_errors: true

    - name: Show force shutdown result
      debug:
        msg: "Force shutdown of VM instance {{ 'completed' if not (force_delete_result.failed | default(false)) else 'initiated but may still be in progress' }}"
      when: force_shutdown | bool

    - name: Wait for VM to be stopped
      k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        namespace: "{{ target.namespace }}"
        name: "{{ target.vm_name }}"
      register: vmi_status
      until: vmi_status.resources | length == 0
      retries: 60
      delay: 10
      ignore_errors: true

    - name: Confirm VM is stopped
      k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        namespace: "{{ target.namespace }}"
        name: "{{ target.vm_name }}"
      register: vm_info
      ignore_errors: true

    - name: Display VM status
      debug:
        msg: "VM '{{ target.vm_name }}' has been successfully powered off"

- name: VM is already stopped
  debug:
    msg: "VM '{{ target.vm_name }}' is already stopped - no action needed"
  when: not vm_running
