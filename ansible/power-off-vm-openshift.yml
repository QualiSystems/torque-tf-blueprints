---
- name: Power Off VM in OpenShift using KubeVirt API
  hosts: localhost
  connection: local
  gather_facts: false
  collections:
    - kubernetes.core
  vars:    # VM parameters - these can be overridden via extra vars
    namespace_json: "{{ namespace | default('{}') }}"
    parsed_namespace: "{{ namespace_json | from_json if namespace_json is string else namespace_json }}"
    namespace: "{{ parsed_namespace.Namespace | default('quali') }}"
    vm_name: "{{ parsed_namespace['VM Name'] | default('') }}"
    vm_csv: "{{ vms | default('') }}"  # New: optional comma-separated list of vmName[:namespace] pairs; if provided supersedes single vm_name/namespace
    force_shutdown: "{{ force | default(false) }}"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Ensure Python dependencies for k8s modules
      package:
        name:
          - python3-pip
        state: present
    - name: Install Kubernetes & OpenShift Python client libs
      pip:
        name:
          - kubernetes
          - openshift
        executable: pip3

    - name: Init VM list from vm_csv (if provided)
      set_fact:
        vms_to_process: []
      when: (vm_csv | default('')) | length > 0

    - name: Build VM list entries
      set_fact:
        vms_to_process: "{{ vms_to_process + [ { 'vm_name': item.split(':')[0], 'namespace': (item.split(':') | length > 1) | ternary(item.split(':')[1], namespace) } ] }}"
      loop: "{{ (vm_csv | default('')) | split(',') | map('trim') | reject('equalto','') | list }}"
      when: (vm_csv | default('')) | length > 0

    - name: Show parsed VM list
      debug:
        var: vms_to_process
      when: (vm_csv | default('')) | length > 0

    - name: Power off multiple VMs (vm_csv mode)
      when: (vm_csv | default('')) | length > 0
      include_tasks: power_off_vm_task.yml
      loop: "{{ vms_to_process }}"
      loop_control:
        loop_var: target
        label: "{{ target.vm_name }} in {{ target.namespace }}"

    - name: Power off single VM (legacy mode)
      when: (vm_csv | default('')) | length == 0
      block:
        
        - name: Check if VM exists
          k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            namespace: "{{ namespace }}"
            name: "{{ vm_name }}"
          register: vm_status
          failed_when: vm_status.resources | length == 0
          
        - name: Get current VM running state
          set_fact:
            vm_running: "{{ (vm_status.resources[0].status.printableStatus | default('')) == 'Running' }}"

        - name: Show current VM state
          debug:
            msg: "VM '{{ vm_name }}' in namespace '{{ namespace }}' is currently {{ 'running' if vm_running else 'stopped' }}."

        - name: Power off VM if currently running
          when: vm_running
          block:
            - name: Update VM definition to set running state to false
              k8s:            
                state: patched
                api_version: kubevirt.io/v1
                kind: VirtualMachine
                namespace: "{{ namespace }}"
                name: "{{ vm_name }}"
                definition:
                  spec:
                    runStrategy: "Halted"
              register: vm_stop_result

            - name: Show VM stop action result
              debug:
                msg: "Started powering off VM '{{ vm_name }}' with {{ 'FORCE' if force_shutdown | bool else 'graceful' }} shutdown"
            
            - name: Force delete the VMI (Virtual Machine Instance) to accelerate shutdown
              k8s:
                state: absent
                api_version: kubevirt.io/v1
                kind: VirtualMachineInstance
                namespace: "{{ namespace }}"
                name: "{{ vm_name }}"
                wait: yes
                wait_timeout: 30
              when: force_shutdown | bool
              register: force_delete_result
              ignore_errors: true  # Don't fail if VMI doesn't exist or times out
              
            - name: Show force shutdown result
              debug:
                msg: "Force shutdown of VM instance {{ 'completed' if not (force_delete_result.failed | default(false)) else 'initiated but may still be in progress' }}"
              when: force_shutdown | bool
                
            - name: Wait for VM to be stopped
              k8s_info:
                api_version: kubevirt.io/v1
                kind: VirtualMachineInstance
                namespace: "{{ namespace }}"
                name: "{{ vm_name }}"
              register: vmi_status
              until: vmi_status.resources | length == 0
              retries: 60
              delay: 10
              ignore_errors: true  # Don't fail if we can't check status
              
            - name: Confirm VM is stopped
              k8s_info:
                api_version: kubevirt.io/v1
                kind: VirtualMachine
                namespace: "{{ namespace }}"
                name: "{{ vm_name }}"
              register: vm_info
              ignore_errors: true  # Continue even if we can't get VM info
              
            - name: Display VM status
              debug:
                msg: "VM '{{ vm_name }}' has been successfully powered off"
        
        - name: VM is already stopped
          debug:
            msg: "VM '{{ vm_name }}' is already stopped - no action needed"
          when: not vm_running
