---
- name: Power Off VM in OpenShift using KubeVirt API
  hosts: localhost
  connection: local
  gather_facts: false
  collections:
    - kubernetes.core
  vars:
    parsed_namespace: "{{ namespace_json | default({}) }}"
    vm_namespace: "{{ parsed_namespace['Namespace'] }}"
    vm_name: "{{ parsed_namespace['VM Name'] }}"
    force_shutdown: "{{ force | default(false) }}"
    ansible_python_interpreter: /usr/bin/python3


  tasks:
    - name: Show parsed vm_namespace (debug)
      debug:
        var: parsed_namespace

    - name: Show vm_name
      debug:
        msg: 
          vm_name: "{{ parsed_namespace['VM Name'] }}"
          parsed_namespace: "{{ parsed_namespace | to_nice_json }}"

    - name: Show vm_namespace
      debug:
        msg: "Namespace is {{ vm_namespace }}"
    - name: Ensure Python dependencies for k8s modules
      package:
        name:
          - python3-pip
        state: present
    - name: Install Kubernetes & OpenShift Python client libs
      pip:
        name:
          - kubernetes
          - openshift
        executable: pip3
        
    - name: Check if VM exists
      k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        namespace: "{{ vm_namespace }}"
        name: "{{ vm_name }}"
      register: vm_status
      failed_when: vm_status.resources | length == 0
      
    - name: Get current VM running state
      set_fact:
        vm_running: "{{ vm_status.resources[0].status.printableStatus | default(false) if vm_status.resources[0].status.printableStatus == 'Running' else false }}"

    - name: Show current VM state
      debug:
        msg: "VM '{{ vm_name }}' in vm_namespace '{{ vm_namespace }}' is currently {{ 'running' if vm_running else 'stopped' }}."

    - name: Power off VM if currently running
      when: vm_running
      block:
        - name: Update VM definition to set running state to false
          k8s:            
            state: patched
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            namespace: "{{ vm_namespace }}"
            name: "{{ vm_name }}"
            definition:
              spec:
                runStrategy: "Halted"
          register: vm_stop_result

        - name: Show VM stop action result
          debug:
            msg: "Started powering off VM '{{ vm_name }}' with {{ 'FORCE' if force_shutdown | bool else 'graceful' }} shutdown"
        
        # Only execute force delete when force_shutdown is true
        - name: Force delete the VMI (Virtual Machine Instance) to accelerate shutdown
          k8s:
            state: absent
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            namespace: "{{ vm_namespace }}"
            name: "{{ vm_name }}"
            wait: yes
            wait_timeout: 30
          when: force_shutdown | bool
          register: force_delete_result
          ignore_errors: true  # Don't fail if VMI doesn't exist or times out
          
        # Show force shutdown result if applicable
        - name: Show force shutdown result
          debug:
            msg: "Force shutdown of VM instance {{ 'completed' if not (force_delete_result.failed | default(false)) else 'initiated but may still be in progress' }}"
          when: force_shutdown | bool
            
        - name: Wait for VM to be stopped
          k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            namespace: "{{ vm_namespace }}"
            name: "{{ vm_name }}"
          register: vmi_status
          until: vmi_status.resources | length == 0
          retries: 60
          delay: 10
          ignore_errors: true  # Don't fail if we can't check status
          
        - name: Confirm VM is stopped
          k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            namespace: "{{ vm_namespace }}"
            name: "{{ vm_name }}"
          register: vm_info
          ignore_errors: true  # Continue even if we can't get VM info
          
        - name: Display VM status
          debug:
            msg: "VM '{{ vm_name }}' has been successfully powered off"
      
    - name: VM is already stopped
      debug:
        msg: "VM '{{ vm_name }}' is already stopped - no action needed"
      when: not vm_running